/*
 * PolicyProvisionerLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 02/08/2016
 */
package com.veritas.netbackup.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class Attributes 
        extends java.util.Observable
        implements java.io.Serializable {
    private static final long serialVersionUID = 4918101765778557523L;
    private String activeState;
    private String altCientName;
    private boolean applicationConsistent;
    private String applicationDefined;
    private boolean applicationDiscovery;
    private List<String> ascAppsAndAttrList;
    private boolean blockIncremental;
    private boolean checkpoint;
    private int chkptIntervalSeconds;
    private boolean clientCompress;
    private boolean clientEncrypt;
    private String clientType;
    private boolean collectBMRinfo;
    private String collectTIRinfo;
    private boolean crossMountPoints;
    private String dataClassification;
    private String dataMoverType;
    private String dbBackupShareArgs;
    private int discoveryLifetimeSeconds;
    private int effectiveDateUTC;
    private boolean externalSecurityInfo;
    private boolean failOnError;
    private boolean followNFSmounts;
    private boolean frozenImage;
    private int generation;
    private boolean granularRestoreInfo;
    private String hypervServer;
    private boolean ifrfr;
    private boolean ignoreClientDirect;
    private String keyword;
    private int maxFragSizeMb;
    private int maxJobsPerClass;
    private int numberOfCopies;
    private boolean offhostBackup;
    private boolean optimizedBackup;
    private String oracleBackupArchiveFileNameFormat;
    private String oracleBackupArchiveLogArguments;
    private String oracleBackupControlFileNameFormat;
    private String oracleBackupDataFileArguments;
    private String oracleBackupDataFileNameFormat;
    private String oracleBackupFraFileNameFormat;
    private String oracleBackupSetID;
    private boolean pFIenabled;
    private String policyTypeName;
    private int priority;
    private String proxyClient;
    private String shareGroup;
    private String snapshotMethod;
    private String snapshotMethodArgs;
    private String storage;
    private boolean storageIsSLP;
    private boolean streaming;
    private boolean useAccelerator;
    private boolean useAlternateClient;
    private boolean useDataMover;
    private boolean useVirtualMachine;
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("activeState")
    public String getActiveState ( ) { 
        return this.activeState;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("activeState")
    public void setActiveState (String value) { 
        this.activeState = value;
        notifyObservers(this.activeState);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("altCientName")
    public String getAltCientName ( ) { 
        return this.altCientName;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("altCientName")
    public void setAltCientName (String value) { 
        this.altCientName = value;
        notifyObservers(this.altCientName);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("applicationConsistent")
    public boolean getApplicationConsistent ( ) { 
        return this.applicationConsistent;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("applicationConsistent")
    public void setApplicationConsistent (boolean value) { 
        this.applicationConsistent = value;
        notifyObservers(this.applicationConsistent);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("applicationDefined")
    public String getApplicationDefined ( ) { 
        return this.applicationDefined;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("applicationDefined")
    public void setApplicationDefined (String value) { 
        this.applicationDefined = value;
        notifyObservers(this.applicationDefined);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("applicationDiscovery")
    public boolean getApplicationDiscovery ( ) { 
        return this.applicationDiscovery;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("applicationDiscovery")
    public void setApplicationDiscovery (boolean value) { 
        this.applicationDiscovery = value;
        notifyObservers(this.applicationDiscovery);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("ascAppsAndAttrList")
    public List<String> getAscAppsAndAttrList ( ) { 
        return this.ascAppsAndAttrList;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("ascAppsAndAttrList")
    public void setAscAppsAndAttrList (List<String> value) { 
        this.ascAppsAndAttrList = value;
        notifyObservers(this.ascAppsAndAttrList);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("blockIncremental")
    public boolean getBlockIncremental ( ) { 
        return this.blockIncremental;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("blockIncremental")
    public void setBlockIncremental (boolean value) { 
        this.blockIncremental = value;
        notifyObservers(this.blockIncremental);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("checkpoint")
    public boolean getCheckpoint ( ) { 
        return this.checkpoint;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("checkpoint")
    public void setCheckpoint (boolean value) { 
        this.checkpoint = value;
        notifyObservers(this.checkpoint);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("chkptIntervalSeconds")
    public int getChkptIntervalSeconds ( ) { 
        return this.chkptIntervalSeconds;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("chkptIntervalSeconds")
    public void setChkptIntervalSeconds (int value) { 
        this.chkptIntervalSeconds = value;
        notifyObservers(this.chkptIntervalSeconds);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("clientCompress")
    public boolean getClientCompress ( ) { 
        return this.clientCompress;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("clientCompress")
    public void setClientCompress (boolean value) { 
        this.clientCompress = value;
        notifyObservers(this.clientCompress);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("clientEncrypt")
    public boolean getClientEncrypt ( ) { 
        return this.clientEncrypt;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("clientEncrypt")
    public void setClientEncrypt (boolean value) { 
        this.clientEncrypt = value;
        notifyObservers(this.clientEncrypt);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("clientType")
    public String getClientType ( ) { 
        return this.clientType;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("clientType")
    public void setClientType (String value) { 
        this.clientType = value;
        notifyObservers(this.clientType);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("collectBMRinfo")
    public boolean getCollectBMRinfo ( ) { 
        return this.collectBMRinfo;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("collectBMRinfo")
    public void setCollectBMRinfo (boolean value) { 
        this.collectBMRinfo = value;
        notifyObservers(this.collectBMRinfo);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("collectTIRinfo")
    public String getCollectTIRinfo ( ) { 
        return this.collectTIRinfo;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("collectTIRinfo")
    public void setCollectTIRinfo (String value) { 
        this.collectTIRinfo = value;
        notifyObservers(this.collectTIRinfo);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("crossMountPoints")
    public boolean getCrossMountPoints ( ) { 
        return this.crossMountPoints;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("crossMountPoints")
    public void setCrossMountPoints (boolean value) { 
        this.crossMountPoints = value;
        notifyObservers(this.crossMountPoints);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("dataClassification")
    public String getDataClassification ( ) { 
        return this.dataClassification;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("dataClassification")
    public void setDataClassification (String value) { 
        this.dataClassification = value;
        notifyObservers(this.dataClassification);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("dataMoverType")
    public String getDataMoverType ( ) { 
        return this.dataMoverType;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("dataMoverType")
    public void setDataMoverType (String value) { 
        this.dataMoverType = value;
        notifyObservers(this.dataMoverType);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("dbBackupShareArgs")
    public String getDbBackupShareArgs ( ) { 
        return this.dbBackupShareArgs;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("dbBackupShareArgs")
    public void setDbBackupShareArgs (String value) { 
        this.dbBackupShareArgs = value;
        notifyObservers(this.dbBackupShareArgs);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("discoveryLifetimeSeconds")
    public int getDiscoveryLifetimeSeconds ( ) { 
        return this.discoveryLifetimeSeconds;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("discoveryLifetimeSeconds")
    public void setDiscoveryLifetimeSeconds (int value) { 
        this.discoveryLifetimeSeconds = value;
        notifyObservers(this.discoveryLifetimeSeconds);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("effectiveDateUTC")
    public int getEffectiveDateUTC ( ) { 
        return this.effectiveDateUTC;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("effectiveDateUTC")
    public void setEffectiveDateUTC (int value) { 
        this.effectiveDateUTC = value;
        notifyObservers(this.effectiveDateUTC);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("externalSecurityInfo")
    public boolean getExternalSecurityInfo ( ) { 
        return this.externalSecurityInfo;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("externalSecurityInfo")
    public void setExternalSecurityInfo (boolean value) { 
        this.externalSecurityInfo = value;
        notifyObservers(this.externalSecurityInfo);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("failOnError")
    public boolean getFailOnError ( ) { 
        return this.failOnError;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("failOnError")
    public void setFailOnError (boolean value) { 
        this.failOnError = value;
        notifyObservers(this.failOnError);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("followNFSmounts")
    public boolean getFollowNFSmounts ( ) { 
        return this.followNFSmounts;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("followNFSmounts")
    public void setFollowNFSmounts (boolean value) { 
        this.followNFSmounts = value;
        notifyObservers(this.followNFSmounts);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("frozenImage")
    public boolean getFrozenImage ( ) { 
        return this.frozenImage;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("frozenImage")
    public void setFrozenImage (boolean value) { 
        this.frozenImage = value;
        notifyObservers(this.frozenImage);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("generation")
    public int getGeneration ( ) { 
        return this.generation;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("generation")
    public void setGeneration (int value) { 
        this.generation = value;
        notifyObservers(this.generation);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("granularRestoreInfo")
    public boolean getGranularRestoreInfo ( ) { 
        return this.granularRestoreInfo;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("granularRestoreInfo")
    public void setGranularRestoreInfo (boolean value) { 
        this.granularRestoreInfo = value;
        notifyObservers(this.granularRestoreInfo);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("hypervServer")
    public String getHypervServer ( ) { 
        return this.hypervServer;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("hypervServer")
    public void setHypervServer (String value) { 
        this.hypervServer = value;
        notifyObservers(this.hypervServer);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("ifrfr")
    public boolean getIfrfr ( ) { 
        return this.ifrfr;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("ifrfr")
    public void setIfrfr (boolean value) { 
        this.ifrfr = value;
        notifyObservers(this.ifrfr);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("ignoreClientDirect")
    public boolean getIgnoreClientDirect ( ) { 
        return this.ignoreClientDirect;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("ignoreClientDirect")
    public void setIgnoreClientDirect (boolean value) { 
        this.ignoreClientDirect = value;
        notifyObservers(this.ignoreClientDirect);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("keyword")
    public String getKeyword ( ) { 
        return this.keyword;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("keyword")
    public void setKeyword (String value) { 
        this.keyword = value;
        notifyObservers(this.keyword);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("maxFragSizeMb")
    public int getMaxFragSizeMb ( ) { 
        return this.maxFragSizeMb;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("maxFragSizeMb")
    public void setMaxFragSizeMb (int value) { 
        this.maxFragSizeMb = value;
        notifyObservers(this.maxFragSizeMb);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("maxJobsPerClass")
    public int getMaxJobsPerClass ( ) { 
        return this.maxJobsPerClass;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("maxJobsPerClass")
    public void setMaxJobsPerClass (int value) { 
        this.maxJobsPerClass = value;
        notifyObservers(this.maxJobsPerClass);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("numberOfCopies")
    public int getNumberOfCopies ( ) { 
        return this.numberOfCopies;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("numberOfCopies")
    public void setNumberOfCopies (int value) { 
        this.numberOfCopies = value;
        notifyObservers(this.numberOfCopies);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("offhostBackup")
    public boolean getOffhostBackup ( ) { 
        return this.offhostBackup;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("offhostBackup")
    public void setOffhostBackup (boolean value) { 
        this.offhostBackup = value;
        notifyObservers(this.offhostBackup);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("optimizedBackup")
    public boolean getOptimizedBackup ( ) { 
        return this.optimizedBackup;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("optimizedBackup")
    public void setOptimizedBackup (boolean value) { 
        this.optimizedBackup = value;
        notifyObservers(this.optimizedBackup);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("oracleBackupArchiveFileNameFormat")
    public String getOracleBackupArchiveFileNameFormat ( ) { 
        return this.oracleBackupArchiveFileNameFormat;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("oracleBackupArchiveFileNameFormat")
    public void setOracleBackupArchiveFileNameFormat (String value) { 
        this.oracleBackupArchiveFileNameFormat = value;
        notifyObservers(this.oracleBackupArchiveFileNameFormat);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("oracleBackupArchiveLogArguments")
    public String getOracleBackupArchiveLogArguments ( ) { 
        return this.oracleBackupArchiveLogArguments;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("oracleBackupArchiveLogArguments")
    public void setOracleBackupArchiveLogArguments (String value) { 
        this.oracleBackupArchiveLogArguments = value;
        notifyObservers(this.oracleBackupArchiveLogArguments);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("oracleBackupControlFileNameFormat")
    public String getOracleBackupControlFileNameFormat ( ) { 
        return this.oracleBackupControlFileNameFormat;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("oracleBackupControlFileNameFormat")
    public void setOracleBackupControlFileNameFormat (String value) { 
        this.oracleBackupControlFileNameFormat = value;
        notifyObservers(this.oracleBackupControlFileNameFormat);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("oracleBackupDataFileArguments")
    public String getOracleBackupDataFileArguments ( ) { 
        return this.oracleBackupDataFileArguments;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("oracleBackupDataFileArguments")
    public void setOracleBackupDataFileArguments (String value) { 
        this.oracleBackupDataFileArguments = value;
        notifyObservers(this.oracleBackupDataFileArguments);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("oracleBackupDataFileNameFormat")
    public String getOracleBackupDataFileNameFormat ( ) { 
        return this.oracleBackupDataFileNameFormat;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("oracleBackupDataFileNameFormat")
    public void setOracleBackupDataFileNameFormat (String value) { 
        this.oracleBackupDataFileNameFormat = value;
        notifyObservers(this.oracleBackupDataFileNameFormat);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("oracleBackupFraFileNameFormat")
    public String getOracleBackupFraFileNameFormat ( ) { 
        return this.oracleBackupFraFileNameFormat;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("oracleBackupFraFileNameFormat")
    public void setOracleBackupFraFileNameFormat (String value) { 
        this.oracleBackupFraFileNameFormat = value;
        notifyObservers(this.oracleBackupFraFileNameFormat);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("oracleBackupSetID")
    public String getOracleBackupSetID ( ) { 
        return this.oracleBackupSetID;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("oracleBackupSetID")
    public void setOracleBackupSetID (String value) { 
        this.oracleBackupSetID = value;
        notifyObservers(this.oracleBackupSetID);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("PFIenabled")
    public boolean getPFIenabled ( ) { 
        return this.pFIenabled;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("PFIenabled")
    public void setPFIenabled (boolean value) { 
        this.pFIenabled = value;
        notifyObservers(this.pFIenabled);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("policyTypeName")
    public String getPolicyTypeName ( ) { 
        return this.policyTypeName;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("policyTypeName")
    public void setPolicyTypeName (String value) { 
        this.policyTypeName = value;
        notifyObservers(this.policyTypeName);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("priority")
    public int getPriority ( ) { 
        return this.priority;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("priority")
    public void setPriority (int value) { 
        this.priority = value;
        notifyObservers(this.priority);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("proxyClient")
    public String getProxyClient ( ) { 
        return this.proxyClient;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("proxyClient")
    public void setProxyClient (String value) { 
        this.proxyClient = value;
        notifyObservers(this.proxyClient);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("shareGroup")
    public String getShareGroup ( ) { 
        return this.shareGroup;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("shareGroup")
    public void setShareGroup (String value) { 
        this.shareGroup = value;
        notifyObservers(this.shareGroup);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("snapshotMethod")
    public String getSnapshotMethod ( ) { 
        return this.snapshotMethod;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("snapshotMethod")
    public void setSnapshotMethod (String value) { 
        this.snapshotMethod = value;
        notifyObservers(this.snapshotMethod);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("snapshotMethodArgs")
    public String getSnapshotMethodArgs ( ) { 
        return this.snapshotMethodArgs;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("snapshotMethodArgs")
    public void setSnapshotMethodArgs (String value) { 
        this.snapshotMethodArgs = value;
        notifyObservers(this.snapshotMethodArgs);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("storage")
    public String getStorage ( ) { 
        return this.storage;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("storage")
    public void setStorage (String value) { 
        this.storage = value;
        notifyObservers(this.storage);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("storageIsSLP")
    public boolean getStorageIsSLP ( ) { 
        return this.storageIsSLP;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("storageIsSLP")
    public void setStorageIsSLP (boolean value) { 
        this.storageIsSLP = value;
        notifyObservers(this.storageIsSLP);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("streaming")
    public boolean getStreaming ( ) { 
        return this.streaming;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("streaming")
    public void setStreaming (boolean value) { 
        this.streaming = value;
        notifyObservers(this.streaming);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("useAccelerator")
    public boolean getUseAccelerator ( ) { 
        return this.useAccelerator;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("useAccelerator")
    public void setUseAccelerator (boolean value) { 
        this.useAccelerator = value;
        notifyObservers(this.useAccelerator);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("useAlternateClient")
    public boolean getUseAlternateClient ( ) { 
        return this.useAlternateClient;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("useAlternateClient")
    public void setUseAlternateClient (boolean value) { 
        this.useAlternateClient = value;
        notifyObservers(this.useAlternateClient);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("useDataMover")
    public boolean getUseDataMover ( ) { 
        return this.useDataMover;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("useDataMover")
    public void setUseDataMover (boolean value) { 
        this.useDataMover = value;
        notifyObservers(this.useDataMover);
    }
 
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("useVirtualMachine")
    public boolean getUseVirtualMachine ( ) { 
        return this.useVirtualMachine;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("useVirtualMachine")
    public void setUseVirtualMachine (boolean value) { 
        this.useVirtualMachine = value;
        notifyObservers(this.useVirtualMachine);
    }
 
}
 